library(devtools)
library(devtools)
usethis::use_github()
git_default_branch()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
usethis::use_github()
?use_mit_license
use_apache_license()
use_test()
?use_r
use_r("test_function")
testthat::test_check("kevinsRepo")
?testthat::test_check
use_test("test_function")
?expect_equal
test()
usethis::use_readme_md()
getwd()
use_r("ors")
data <- data.frame(y = c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0),  x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
model <- glm(y ~ x, data = data, family = binomial)
inherits(model, "glm")
#' @export
#'
#' @examples
#' # Example data
#' data <- data.frame(y = c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0),
#'                   x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
#' # Fit a logistic regression model
#' model <- glm(y ~ x, data = data, family = binomial)
#' # Calculate odds ratios and confidence intervals
#' ors(model)
ors <- function(model){
# check if model is of class glm
if(!inherits(model, "glm")){
stop("Model must be of class glm")
}
# exponentiate values
# deposit results in matrix
a <- cbind(exp(coef(model)), exp(confint(model)))
# name columns
colnames(a) <- c("OR", "2.5 %", "97.5 %")
print(a)
}
ors(model = model)
summary(model)
ors(model)
rm(list = ls(all = T))
use_test("ors")
data <- data.frame(y = c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0),  x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
model <- glm(y ~ x, data = data, family = binomial)
ors(model)
#' @export
#'
#' @examples
#' # Example data
#' data <- data.frame(y = c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0),
#'                   x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
#' # Fit a logistic regression model
#' model <- glm(y ~ x, data = data, family = binomial)
#' # Calculate odds ratios and confidence intervals
#' ors(model)
ors <- function(model){
# check if model is of class glm
if(!inherits(model, "glm")){
stop("Model must be of class glm")
}
# exponentiate values
# deposit results in matrix
a <- cbind(exp(coef(model)), exp(confint(model)))
# name columns
colnames(a) <- c("OR", "2.5 %", "97.5 %")
print(a)
}
class(ors(model))
#' @export
#'
#' @examples
#' # Example data
#' data <- data.frame(y = c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0),
#'                   x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
#' # Fit a logistic regression model
#' model <- glm(y ~ x, data = data, family = binomial)
#' # Calculate odds ratios and confidence intervals
#' ors(model)
ors <- function(model){
# check if model is of class glm
if(!inherits(model, "glm")){
stop("Model must be of class glm")
}
# exponentiate values
# deposit results in matrix
a <- cbind(exp(coef(model)), exp(confint(model)))
# name columns
colnames(a) <- c("OR", "2.5 %", "97.5 %")
return(a)
}
ors(model)
test <- ors(model)
test
class(test)
devtools::test()
devtools::test()
#' @export
#'
#' @examples
#' # Example data
#' data <- data.frame(y = c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0),
#'                   x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
#' # Fit a logistic regression model
#' model <- glm(y ~ x, data = data, family = binomial)
#' # Calculate odds ratios and confidence intervals
#' ors(model)
ors <- function(model){
# check if model is of class glm
if(!inherits(model, "glm")){
stop("Model must be of class glm")
}
# exponentiate values
# deposit results in matrix
a <- cbind(exp(coef(model)), exp(confint(model)))
# name columns
colnames(a) <- c("OR", "2.5 %", "97.5 %")
return(a)
}
ors(mode)
ors(model)
test <- ors(model)
class(test)
?expect_type
class(test)
devtools::test()
devtools::test()
?expect
devtools::test()
rm(list = ls(all = T))
use_r("logit_diag")
?hoslem.test
??hoslem.test
??tab_acc
use_test("logit_diag")
# Create a data frame
d <- data.frame(y = c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0),
x1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
x2 = c(10, 9, 8, 7, 6, 5, 4, 3, 2, 1))
#' @importFrom ResourceSelection hoslem.test
#'
#' @examples
#' data <- data.frame(y = c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0),
#'                    x1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
#'                    x2 = c(10, 9, 8, 7, 6, 5, 4, 3, 2, 1))
#'
#' model <- glm(y ~ x1 + x2, data = data, family = binomial)
#'
#' logit_diag(model, "model", 1)
logit_diag <- function(model, model_name, counter) {
if (!inherits(model, "glm")) {
stop("model must be of class glm")
}
# Calculate odds ratios and print
ors_object <- ors(model)
assign(paste0(model_name, ".ors", counter), ors_object, envir = .GlobalEnv)
print(ors_object)
# ANOVA test and print
aod_object <- anova(model, test = "Chisq")
assign(paste0(model_name, ".aod", counter), aod_object, envir = .GlobalEnv)
print(aod_object)
# Nagelkerke's R-squared and print
rsq_object <- rcompanion::nagelkerke(model)
assign(paste0(model_name, ".rsq", counter), rsq_object, envir = .GlobalEnv)
print(rsq_object)
# Hosmer-Lemeshow test and print
hos_object <- hoslem.test(model$y, round(fitted(model), 1), g = 10)
assign(paste0(model_name, ".hos", counter), hos_object, envir = .GlobalEnv)
print(hos_object)
# Prediction and confusion matrix
pred_object <- predict(model, newdata = d, type = "response")
bpred_object <- ifelse(pred_object > 0.5, 1, 0)
class_object <- table(d$res_outcome, bpred_object)
assign(paste0(model_name, ".class", counter), class_object, envir = .GlobalEnv)
print(class_object)
# Accuracy table
tab_acc_object <- tab_acc(class_object)
assign(paste0(model_name, ".tab_acc", counter), tab_acc_object, envir = .GlobalEnv)
print(tab_acc_object)
}
# Fit a logistic regression model
model <- glm(y ~ x1 + x2, data = d, family = binomial)
# Run the logit_diag function
logit_diag(model, "model", 1)
library(ResourceSelection)
# Run the logit_diag function
logit_diag(model, "model", 1)
View(d)
?newdata
?predict
??predict
use_r("tab_acc")
library(devtools)
usethis::use_github()
?use_git_remote
git_remotes()
